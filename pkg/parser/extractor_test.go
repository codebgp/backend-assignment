package parser

import (
	"fmt"
	"github.com/sermojohn/postgres-client/pkg/domain"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestExtractIXPSummary(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name               string
		input              string
		expectedIXPSummary *domain.BGPSummary
		expectError        bool
	}{
		{
			name:               "valid content",
			input:              "BGP router identifier 74.80.94.4, local AS number 3856\nRIB entries 844421, using 52 MiB of memory\nPeers 170, using 418 KiB of memory\nPeer groups 8, using 128 bytes of memory\n\nNeighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd\n218.100.44.53   4 136749   89947   89943        0    0    0 04w6d21h        7\n218.100.44.75   4 32261 2058988  250705        0    0    0 01w4d04h        7\n218.100.44.120  4  6939 2797507   88915        0    0    0 04w6d21h   125585\n218.100.44.130  4 45220  114644   57235        0    0    0 5d18h46m        1\n218.100.44.158  4 15169  338845  318641        0    0    0 04w6d21h      913\n218.100.44.93   4 45144  276614  251354        0    0    0 04w6d21h       15\n218.100.44.94   4 45144  276678  251353        0    0    0 04w6d21h        4\n74.80.94.1      4    42 4169331  347944        0    0    0 34w3d15h   131163\n206.220.231.55  4  3856  319244 2753932        0    0    0 2d00h56m        0\n218.100.44.30   4 24429  401668  347894        0    0    0 04w6d21h        3\n218.100.44.33   4 19551  724972  695698        0    0    0 04w6d21h      165\n218.100.44.49   4 138339  347816  347815        0    0    0 01w3d18h        1\n218.100.44.55   4 13150       0   29720        0    0    0 never    Active     \n218.100.44.57   4 55482  400837  347836        0    0    0 02w1d20h        9\n218.100.44.58   4 133936  381954  347024        0    0    0 04w6d21h       16\n218.100.44.59   4 21859  728204  695514        0    0    0 04w6d21h        8\n218.100.44.62   4 132203  117787  235574        0    0    0 never    Idle       \n218.100.44.63   4 45839  383188  347802        0    0    0 04w6d21h       75\n218.100.44.65   4 132372  382710  347653        0    0    0 04w6d21h       15\n218.100.44.67   4 24218  741967  694354        0    0    0 04w6d21h      256\n218.100.44.68   4 45668  382909  347839        0    0    0 04w6d21h       55\n218.100.44.72   4 38182  661867  347762        0    0    0 04w6d21h      202\n218.100.44.74   4 38278  382759  347651        0    0    0 04w6d21h       15\n218.100.44.76   4 24028  405931  347801        0    0    0 04w6d21h      120\n218.100.44.80   4  9534  379675  347898        0    0    0 04w5d06h      161\n218.100.44.84   4 10204  387297  347855        0    0    0 04w6d20h       35\n218.100.44.86   4 38466  717565  695676        0    0    0 04w6d21h       26\n218.100.44.87   4 10030  352551  346859        0    0    0 5d21h03m       45\n218.100.44.92   4 15169  730275  695159        0    0    0 04w6d21h      913\n218.100.44.96   4 45839  346873  346856        0    0    0 5d03h54m       15\n218.100.44.102  4 45352  384436  347834        0    0    0 04w6d21h       92\n218.100.44.104  4 45960  382947  347843        0    0    0 04w6d21h      128\n218.100.44.108  4 45945  290460  290373        0    0    0 05w4d23h Active     \n218.100.44.109  4 55720  351510  347859        0    0    0 03w3d06h       33\n218.100.44.111  4 45352  384409  347885        0    0    0 04w6d21h      140\n218.100.44.112  4  9930  427609  347848        0    0    0 04w6d21h      820\n218.100.44.113  4 46015  382937  347840        0    0    0 04w6d21h       10\n218.100.44.115  4 10030  411283  406812        0    0    0 04w6d21h      136\n218.100.44.121  4 131310  383152  347889        0    0    0 04w6d21h       50\n218.100.44.126  4 55420       0       0        0    0    0 never    Active     \n218.100.44.132  4  8674  347796  347770        0    0    0 04w6d21h        5\n218.100.44.135  4 132203  347927  347835        0    0    0 04w6d21h        3\n218.100.44.136  4 132203  348013  347888        0    0    0 04w6d21h        3\n218.100.44.138  4 55822 3701831  347894        0    0    0 04w6d21h    86852\n218.100.44.139  4 55822 3276824  347523        0    0    0 04w6d21h    86839\n218.100.44.140  4 38182  675829  347774        0    0    0 02w2d22h      207\n218.100.44.141  4 38280  376343  341999        0    0    0 03w3d13h       48\n218.100.44.142  4 22822  787433  521616        0    0    0 04w6d21h      699\n218.100.44.144  4 132111  382409  347177        0    0    0 04w6d21h       57\n218.100.44.145  4 18206  383034  347893        0    0    0 04w6d21h       95\n218.100.44.146  4 32934  720528  695853        0    0    0 04w6d21h       44\n218.100.44.150  4 132196  397693  347723        0    0    0 4d16h04m       18\n218.100.44.154  4  8075  716659  695513        0    0    0 04w6d21h      287\n218.100.44.155  4 16509  793055  695654        0    0    0 04w6d21h      880\n218.100.44.157  4 56286  382942  347901        0    0    0 04w6d21h        4\n218.100.44.160  4 24514  387145  347700        0    0    0 04w6d21h       69\n218.100.44.161  4 18206  383421  347705        0    0    0 3d10h35m       99\n218.100.44.163  4 132435  397227  347912        0    0    0 04w6d21h       10\n218.100.44.170  4 20940  721206  695092        0    0    0 04w6d21h       36\n218.100.44.173  4 58910  679414  347895        0    0    0 04w6d21h        8\n218.100.44.177  4 56109 1378755  345972        0    0    0 02w3d21h    88588\n218.100.44.185  4 13335  725653  695683        0    0    0 04w6d21h      767\n218.100.44.188  4 133421  382966  347896        0    0    0 04w6d21h       37\n218.100.44.189  4 132203  347982  347838        0    0    0 01w4d07h        7\n218.100.44.191  4 45410  538485  347690        0    0    0 04w6d21h       15\n218.100.44.193  4 55720  391537  347883        0    0    0 04w6d21h       62\n218.100.44.195  4  9930  429638  347914        0    0    0 04w6d21h      820\n218.100.44.198  4 134809  721213  695661        0    0    0 04w6d21h       37\n218.100.44.203  4 132203  347993  347878        0    0    0 04w6d21h        7\n218.100.44.206  4 134232  405256  347225        0    0    0 4d09h12m        1\n218.100.44.207  4 32934  721600  695678        0    0    0 04w6d21h       44\n218.100.44.210  4 20940  721833  695208        0    0    0 04w6d21h       41\n218.100.44.211  4 38280  381219  346201        0    0    0 04w6d21h       48\n218.100.44.213  4 15932  719609  695688        0    0    0 04w6d21h      364\n218.100.44.214  4  8075  717779  695529        0    0    0 04w6d21h      287\n218.100.44.217  4 136552  382879  347894        0    0    0 04w6d21h        8\n218.100.44.219  4 16509  792204  695532        0    0    0 04w6d21h      880\n218.100.44.220  4 45102 1135977 1042845        0    0    0 01w3d03h       18\n218.100.44.221  4 45102 1135895 1042257        0    0    0 6d04h52m       18\n218.100.44.223  4 135553  382954  347767        0    0    0 04w6d21h       13\n218.100.44.229  4 10310  708060  695630        0    0    0 04w6d21h      145\n218.100.44.230  4 138359  397086  347691        0    0    0 04w6d21h        1\n\nTotal number of neighbors 82\n",
			expectedIXPSummary: &domain.BGPSummary{LocalASNumber: 3856, RIBEntries: 844421, NumberOfPeers: 170, TotalNumberOfNeighbors: 82},
			expectError:        false,
		},
		{
			name:        "invalid content",
			input:       "invalid input",
			expectError: true,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			sum, err := ExtractIXPSummary(tc.input)

			if tc.expectedIXPSummary != nil {
				assert.Equal(t, tc.expectedIXPSummary, sum, "not matching the expected summary")
			}
			assert.Equal(t, tc.expectError, err != nil, fmt.Sprintf("got error %v", err))
		})
	}

}
